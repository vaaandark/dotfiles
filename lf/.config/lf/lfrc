# vaaandark's lf settings
# partly copied from Luke's lf settings

# Note on Image Previews
# For those wanting image previews, like this system, there are four steps to
# set it up. These are done automatically for LARBS users, but I will state
# them here for others doing it manually.
#
# 1. ueberzug must be installed (insteaded from pip).
# 2. The scope file (~/.config/lf/scope for me), must have a command similar to
#    mine to generate ueberzug images.
# 3. A `set cleaner` line as below is a cleaner script.
# 4. lf should be started through a wrapper script
#    (~/.local/bin/lfub -> ~/scripts/lfub for me)
#    that creates the environment for ueberzug. This command can be be aliased
#    in your shellrc (`alias lf="lfub") or if set to a binding, should be
#    called directly instead of normal lf.

# Basic vars
set ifs "\n"
set scrolloff 5
set icons
set drawbox true
set period 1
set hiddenfiles ".*:*.aux:*.log:*.bbl:*.bcf:*.blg:*.run.xml"
set cleaner '~/.config/lf/cleaner'
set previewer '~/.config/lf/scope'
set autoquit on

# cmds/functions
cmd open ${{
    case $(file --mime-type "$(readlink -f $f)" -b) in
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)
            localc $fx
        ;;
        image/vnd.djvu|application/pdf|application/octet-stream|application/postscript)
            setsid -f zathura $fx >/dev/null 2>&1
        ;;
        text/*|application/json|inode/x-empty)
            $EDITOR $fx
        ;;
        image/x-xcf)
            setsid -f gimp $f >/dev/null 2>&1
        ;;
        image/svg+xml)
            display -- $f
        ;;
        image/*)
            viewnoir $f | grep -i "\.\(png\|jpg\|jpeg\|gif\|webp\|tif\|ico\)\(_large\)*$" |
            setsid -f sxiv -aio 2>/dev/null | while read -r file; do
                [ -z "$file" ] && continue
                lf -remote "send select \"$file\""
                lf -remote "send toggle"
            done &
        ;;
        audio/*)
            mpv --audio-display=no $f
        ;;
        video/*|application/vnd.rn-realmedia)
            setsid -f mpv $f -quiet >/dev/null 2>&1
        ;;
        application/pdf|application/vnd.djvu|application/epub*)
            setsid -f zathura $fx >/dev/null 2>&1
        ;;
        application/pgp-encrypted)
            $EDITOR $fx
        ;;
        application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/vnd.oasis.opendocument.text)
            setsid -f libreoffice --writer  $fx >/dev/null 2>&1
        ;;
        application/vnd.openxmlformats-officedocument.spreadsheetml.sheet|application/octet-stream|application/vnd.oasis.opendocument.spreadsheet|application/vnd.oasis.opendocument.spreadsheet-template)
            setsid -f libreoffice --calc $fx >/dev/null 2>&1
        ;;
        application/vnd.openxmlformats-officedocument.presentationml.presentation|application/vnd.oasis.opendocument.presentation-template|application/vnd.oasis.opendocument.presentation|application/vnd.ms-powerpoint)
            setsid -f libreoffice --impress $fx >/dev/null 2>&1
        ;;
        application/vnd.oasis.opendocument.graphics|application/vnd.oasis.opendocument.graphics-template)
            setsid -f libreoffice --draw $fx >/dev/null 2>&1
        ;;
        application/vnd.oasis.opendocument.formula)
            setsid -f libreoffice --math $fx >/dev/null 2>&1
        ;;
        application/vnd.oasis.opendocument.database)
            setsid -f libreoffice --base $fx >/dev/null 2>&1
        ;;
        *)
            for f in $f; do
                setsid -f $OPENER $f >/dev/null 2>&1
            done
        ;;
    esac
}}

cmd mkdir $mkdir -p "$(echo $* | tr ' ' '\ ')"

cmd extract ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "extract?[y/N] "
    read ans
    [ $ans = "y" ] && aunpack $fx
}}

cmd delete ${{
    clear; tput cup $(($(tput lines)/3)); tput bold
    set -f
    printf "%s\n\t" "$fx"
    printf "delete?[y/N] "
    read ans
    [ $ans = "y" ] && rm -rf -- $fx
}}

cmd copyimg ${{
    mime_type="$(file --dereference --brief --mime-type -- "$f")"
    case "$mime_type" in
        image/*) xclip -sel clip -t "$mime_type" "$f";;
        *) printf "%s" "$f" | xclip -selection clipboard;;
    esac
}}

cmd on-cd &{{
    # display git repository status in your prompt
    source /usr/share/git-core/contrib/completion/git-prompt.sh
    GIT_PS1_SHOWDIRTYSTATE=auto
    GIT_PS1_SHOWSTASHSTATE=auto
    GIT_PS1_SHOWUNTRACKEDFILES=auto
    GIT_PS1_SHOWUPSTREAM=auto
    git=$(__git_ps1 " (%s)") || true
    fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f$git\033[0m"
    lf -remote "send $id set promptfmt \"$fmt\""
}}

on-cd

# Bindings
map <c-f> $lf -remote "send $id select \"$(fzf)\""
map J $lf -remote "send $id cd $(sed -e 's/\s*#.*//' -e '/^$/d' -e 's/^\S*\s*//' ${XDG_CONFIG_HOME:-$HOME/.config}/shell/bm-dirs | fzf)"
map D delete
map E extract
map <c-n> push :mkdir<space>
map <c-r> reload
map <c-s> set hidden!
map <enter> shell

map o &mimeopen --no-ask "$f"
map O $mimeopen --ask "$f"

# for example `text.out`
#                      |__ A
#              |__________ I
#                 |_______ i
#                  |______ a
map A rename                # at the very end
map I push A<c-a>           # at the very beginning
map i push A<a-b><a-b><a-f> # before extension
map a push A<a-b>           # after extension
map c push A<c-u>           # totally new rename

map V push :!nvim<space>

map W $setsid -f alacritty >/dev/null 2>&1

# copy the names of selections
map Y $printf "%s" "$fx" | xclip -selection clipboard
# copy current file selection if it's image, or just copy its name
map <c-y> copyimg

# movement
map gd cd ~/Documents
map gD cd ~/Downloads
map gv cd ~/Videos
map gl cd ~/labs
map gp cd ~/Pictures
map gC cd ~/dotfiles
map gs cd ~/src
map gt cd ~/tmp

map gc cd ~/.config
map gr cd ~/src/dev
map gb cd ~/src/dev/scripts

map gh cd ~/Documents/SchoolCodeWork
map gH cd ~/Documents/SchoolWork

map gV cd ~/.config/nvim
map gI cd ~/.config/i3
map gL cd ~/.config/lf

map gB cd ~/Videos/bilibili
map gS cd ~/Videos/sports
